/*
 * Commspace API
 *   # Authentication In order to use this API you'll need two things to authenticate: - an **account_id** which identifies which Commspace account (tenant) you're integrating into. This is provided in the url of all api methods `/accounts/{account_id}/...` - an **API Key** which authenticates your access to the account. This is provided as a header as described below  # Mapping master data  Commspace relies on master data (clients, products, intermediaries) supplied by consumer systems in order to do revenue management. We've chosen to implement a consumer-supplied key system to minimize the data mapping burden for consumers. This means that for all master data entities, the consumer supplies their own unique identifier for each entity. Commspace will store that identifier internally and link any subsequent requests with the same identifier to that same entity. In the [specification](/spec.html) you can easily spot these identifier fields as all fields named with the pattern `<entity>_id` e.g. `client_id`, `product_id`, `intermediary_id`, etc.  Some key mappings (providers, product categories, commission types) have to be pre-configured by the Commspace team ahead of time. We will take responsibility for creating the necessary mappings of your identifiers for each of these entities to their Commspace equivalents - all we require is a full list of the values that you will send.  # Generating-Reports Reports can be generated through the methods exposed at the reports root.  Because reports can take a long time to generate this API does not support blocking calls i.e. wait until the report is generated before returning a response.  This API supports two patterns for non-blocking / asynchronous generation of reports:  - **Callback pattern**. The consumer provides a callback URL to post the report to. This is the preferred pattern.  - **Polling pattern**. The consumer repeatedly polls an endpoint to retrieve the report.  ## Callback pattern To make use of this pattern, simply specify a callback_url in the request to `/accounts/{account_id}/reports`.  When the report has been generated, Commspace will submit a POST to the provided URL with the following:  - report-token is the report token returned by the createReport call  - filename contains a suggested filename.  - content is a base64 encoded string of the binary data of the report  ## Polling pattern When a report is successfully requested, the API responds with a report_token in the response. Consumers can use this token to poll the endpoint `/accounts/{account_id}/reports/{report_token}`.  If the report isn't available yet, a 202 response will be returned. If the report is available a 200 response including the report will be returned. 
 *
 * OpenAPI spec version: 1.1.2
 * Contact: api@commspace.co.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package za.co.commspace.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * IntermediarySplit
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-15T08:32:32.372Z[GMT]")
public class IntermediarySplit {
  @JsonProperty("intermediary_id")
  private String intermediaryId = null;

  @JsonProperty("split_percentage")
  private Double splitPercentage = 100d;

  @JsonProperty("commission_type_id")
  private String commissionTypeId = null;

  @JsonProperty("responsible")
  private Boolean responsible = true;

  @JsonProperty("match_intermediary_on_statement")
  private Boolean matchIntermediaryOnStatement = false;

  public IntermediarySplit intermediaryId(String intermediaryId) {
    this.intermediaryId = intermediaryId;
    return this;
  }

   /**
   * unique identifier by which this intermediary is known at consumer
   * @return intermediaryId
  **/
  @Schema(example = "abc1234", required = true, description = "unique identifier by which this intermediary is known at consumer")
  public String getIntermediaryId() {
    return intermediaryId;
  }

  public void setIntermediaryId(String intermediaryId) {
    this.intermediaryId = intermediaryId;
  }

  public IntermediarySplit splitPercentage(Double splitPercentage) {
    this.splitPercentage = splitPercentage;
    return this;
  }

   /**
   * percentage of commission that the intermediary is entitled to. Defaults to 100 if not supplied.
   * minimum: 0
   * maximum: 100
   * @return splitPercentage
  **/
  @Schema(example = "66.667", description = "percentage of commission that the intermediary is entitled to. Defaults to 100 if not supplied.")
  public Double getSplitPercentage() {
    return splitPercentage;
  }

  public void setSplitPercentage(Double splitPercentage) {
    this.splitPercentage = splitPercentage;
  }

  public IntermediarySplit commissionTypeId(String commissionTypeId) {
    this.commissionTypeId = commissionTypeId;
    return this;
  }

   /**
   * (optional) commission type identifier as it is known by consumer
   * @return commissionTypeId
  **/
  @Schema(example = "initial", description = "(optional) commission type identifier as it is known by consumer")
  public String getCommissionTypeId() {
    return commissionTypeId;
  }

  public void setCommissionTypeId(String commissionTypeId) {
    this.commissionTypeId = commissionTypeId;
  }

  public IntermediarySplit responsible(Boolean responsible) {
    this.responsible = responsible;
    return this;
  }

   /**
   * indicates whether this intermediary is the main intermediary on the agreement (if commission_type_id is not provided) or the commission type (if commission_type_id is provided)
   * @return responsible
  **/
  @Schema(example = "true", description = "indicates whether this intermediary is the main intermediary on the agreement (if commission_type_id is not provided) or the commission type (if commission_type_id is provided)")
  public Boolean isResponsible() {
    return responsible;
  }

  public void setResponsible(Boolean responsible) {
    this.responsible = responsible;
  }

  public IntermediarySplit matchIntermediaryOnStatement(Boolean matchIntermediaryOnStatement) {
    this.matchIntermediaryOnStatement = matchIntermediaryOnStatement;
    return this;
  }

   /**
   * match the intermediary specified on this split with the intermediary on the statement.
   * @return matchIntermediaryOnStatement
  **/
  @Schema(example = "true", description = "match the intermediary specified on this split with the intermediary on the statement.")
  public Boolean isMatchIntermediaryOnStatement() {
    return matchIntermediaryOnStatement;
  }

  public void setMatchIntermediaryOnStatement(Boolean matchIntermediaryOnStatement) {
    this.matchIntermediaryOnStatement = matchIntermediaryOnStatement;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntermediarySplit intermediarySplit = (IntermediarySplit) o;
    return Objects.equals(this.intermediaryId, intermediarySplit.intermediaryId) &&
        Objects.equals(this.splitPercentage, intermediarySplit.splitPercentage) &&
        Objects.equals(this.commissionTypeId, intermediarySplit.commissionTypeId) &&
        Objects.equals(this.responsible, intermediarySplit.responsible) &&
        Objects.equals(this.matchIntermediaryOnStatement, intermediarySplit.matchIntermediaryOnStatement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intermediaryId, splitPercentage, commissionTypeId, responsible, matchIntermediaryOnStatement);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntermediarySplit {\n");
    
    sb.append("    intermediaryId: ").append(toIndentedString(intermediaryId)).append("\n");
    sb.append("    splitPercentage: ").append(toIndentedString(splitPercentage)).append("\n");
    sb.append("    commissionTypeId: ").append(toIndentedString(commissionTypeId)).append("\n");
    sb.append("    responsible: ").append(toIndentedString(responsible)).append("\n");
    sb.append("    matchIntermediaryOnStatement: ").append(toIndentedString(matchIntermediaryOnStatement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
