/*
 * Commspace source data API
 * API for Commspace source data management
 *
 * OpenAPI spec version: 1.0.4
 * Contact: api@commspace.co.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ReportResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-03-31T07:42:49.936Z[GMT]")
public class ReportResponse {
  @SerializedName("content_type")
  private String contentType = null;

  @SerializedName("filename")
  private String filename = null;

  @SerializedName("content")
  private byte[] content = null;

  @SerializedName("report_token")
  private String reportToken = null;

  @SerializedName("message")
  private String message = null;

  public ReportResponse contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * MIME type of the embedded content
   * @return contentType
  **/
  @Schema(example = "application/pdf", description = "MIME type of the embedded content")
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public ReportResponse filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * suggested file name for the embedded content
   * @return filename
  **/
  @Schema(example = "report.pdf", description = "suggested file name for the embedded content")
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }

  public ReportResponse content(byte[] content) {
    this.content = content;
    return this;
  }

   /**
   * base64-encoded array of report data
   * @return content
  **/
  @Schema(description = "base64-encoded array of report data")
  public byte[] getContent() {
    return content;
  }

  public void setContent(byte[] content) {
    this.content = content;
  }

  public ReportResponse reportToken(String reportToken) {
    this.reportToken = reportToken;
    return this;
  }

   /**
   * report token received from create method
   * @return reportToken
  **/
  @Schema(description = "report token received from create method")
  public String getReportToken() {
    return reportToken;
  }

  public void setReportToken(String reportToken) {
    this.reportToken = reportToken;
  }

  public ReportResponse message(String message) {
    this.message = message;
    return this;
  }

   /**
   * message describing outcome of report generation
   * @return message
  **/
  @Schema(description = "message describing outcome of report generation")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportResponse reportResponse = (ReportResponse) o;
    return Objects.equals(this.contentType, reportResponse.contentType) &&
        Objects.equals(this.filename, reportResponse.filename) &&
        Arrays.equals(this.content, reportResponse.content) &&
        Objects.equals(this.reportToken, reportResponse.reportToken) &&
        Objects.equals(this.message, reportResponse.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, filename, Arrays.hashCode(content), reportToken, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportResponse {\n");
    
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    reportToken: ").append(toIndentedString(reportToken)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
