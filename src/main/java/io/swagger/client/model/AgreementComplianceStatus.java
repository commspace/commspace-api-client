/*
 * Commspace source data API
 * API for Commspace source data management
 *
 * OpenAPI spec version: 1.0.4
 * Contact: api@commspace.co.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * AgreementComplianceStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-03-31T12:15:05.519Z[GMT]")
public class AgreementComplianceStatus {
  @JsonProperty("compliant")
  private Boolean compliant = null;

  @JsonProperty("reason")
  private String reason = null;

  @JsonProperty("reasons")
  private List<String> reasons = null;

  public AgreementComplianceStatus compliant(Boolean compliant) {
    this.compliant = compliant;
    return this;
  }

   /**
   * flag indicating compliance status of product
   * @return compliant
  **/
  @Schema(example = "true", required = true, description = "flag indicating compliance status of product")
  public Boolean isCompliant() {
    return compliant;
  }

  public void setCompliant(Boolean compliant) {
    this.compliant = compliant;
  }

  public AgreementComplianceStatus reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * textual description of reason for compliance status. required if compliant is false. This property is deprecated since 1.0.4 in favour of *reasons* attribute
   * @return reason
  **/
  @Schema(description = "textual description of reason for compliance status. required if compliant is false. This property is deprecated since 1.0.4 in favour of *reasons* attribute")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public AgreementComplianceStatus reasons(List<String> reasons) {
    this.reasons = reasons;
    return this;
  }

  public AgreementComplianceStatus addReasonsItem(String reasonsItem) {
    if (this.reasons == null) {
      this.reasons = new ArrayList<>();
    }
    this.reasons.add(reasonsItem);
    return this;
  }

   /**
   * array of textual descriptions of reasons for compliance status. Required if compliant is false.
   * @return reasons
  **/
  @Schema(description = "array of textual descriptions of reasons for compliance status. Required if compliant is false.")
  public List<String> getReasons() {
    return reasons;
  }

  public void setReasons(List<String> reasons) {
    this.reasons = reasons;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgreementComplianceStatus agreementComplianceStatus = (AgreementComplianceStatus) o;
    return Objects.equals(this.compliant, agreementComplianceStatus.compliant) &&
        Objects.equals(this.reason, agreementComplianceStatus.reason) &&
        Objects.equals(this.reasons, agreementComplianceStatus.reasons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compliant, reason, reasons);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgreementComplianceStatus {\n");
    
    sb.append("    compliant: ").append(toIndentedString(compliant)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    reasons: ").append(toIndentedString(reasons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
