/*
 * Commspace API
 *   # Authentication In order to use this API you'll need two things to authenticate: - an **account_id** which identifies which Commspace account (tenant) you're integrating into. This is provided in the url of all api methods `/accounts/{account_id}/...` - an **API Key** which authenticates your access to the account. This is provided as a header as described below  # Mapping master data  Commspace relies on master data (clients, products, intermediaries) supplied by consumer systems in order to do revenue management. We've chosen to implement a consumer-supplied key system to minimize the data mapping burden for consumers. This means that for all master data entities, the consumer supplies their own unique identifier for each entity. Commspace will store that identifier internally and link any subsequent requests with the same identifier to that same entity. In the [specification](/spec.html) you can easily spot these identifier fields as all fields named with the pattern `<entity>_id` e.g. `client_id`, `product_id`, `intermediary_id`, etc.  Some key mappings (providers, product categories, commission types) have to be pre-configured by the Commspace team ahead of time. We will take responsibility for creating the necessary mappings of your identifiers for each of these entities to their Commspace equivalents - all we require is a full list of the values that you will send.  # Generating-Reports Reports can be generated through the methods exposed at the reports root.  Because reports can take a long time to generate this API does not support blocking calls i.e. wait until the report is generated before returning a response.  This API supports two patterns for non-blocking / asynchronous generation of reports:  - **Callback pattern**. The consumer provides a callback URL to post the report to. This is the preferred pattern.  - **Polling pattern**. The consumer repeatedly polls an endpoint to retrieve the report.  ## Callback pattern To make use of this pattern, simply specify a callback_url in the request to `/accounts/{account_id}/reports`.  When the report has been generated, Commspace will submit a POST to the provided URL with the following:  - report-token is the report token returned by the createReport call  - filename contains a suggested filename.  - content is a base64 encoded string of the binary data of the report  ## Polling pattern When a report is successfully requested, the API responds with a report_token in the response. Consumers can use this token to poll the endpoint `/accounts/{account_id}/reports/{report_token}`.  If the report isn't available yet, a 202 response will be returned. If the report is available a 200 response including the report will be returned. 
 *
 * OpenAPI spec version: 1.1.2
 * Contact: api@commspace.co.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package za.co.commspace.api;

import za.co.commspace.ApiException;
import za.co.commspace.api.model.Client;
import za.co.commspace.api.model.CreateReportRequest;
import za.co.commspace.api.model.ImportErrorList;
import za.co.commspace.api.model.Intermediary;
import za.co.commspace.api.model.LoadClientsRequest;
import za.co.commspace.api.model.LoadIntermediariesRequest;
import java.time.LocalDate;
import za.co.commspace.api.model.Page;
import za.co.commspace.api.model.Product;
import za.co.commspace.api.model.ReportResponse;
import za.co.commspace.api.model.ReportToken;
import za.co.commspace.api.model.TemporaryToken;
import za.co.commspace.api.model.TemporaryTokenRequest;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * retrieve report
     *
     * retrieve a report given a token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void accountsAccountIdReportsReportTokenGetTest() throws ApiException {
        String accountId = null;
        UUID reportToken = null;
        ReportResponse response = api.accountsAccountIdReportsReportTokenGet(accountId, reportToken);

        // TODO: test validations
    }
    /**
     * Submit revenue transactions
     *
     * Use this method to submit new revenue transactions to Commspace.  Transactions are grouped into logical batches that are in turn communicated over the wire in pages. Batches are a means of grouping transactions in a way that makes sense from a business perspective e.g. all transactions for a given department for a given day.  Pages are a means of communicating batches in smaller chunks for performance reasons. e.g. break up a batch of 100,000 transactions into 100 pages of 1000 transactions each.  ### Worked example Imagine there are 100,000 transactions to submit on 2020-12-31 for Department A.  A logical batch of these 100,000 transactions can be created with a batch_id of &#x27;A:2020-12-31&#x27; The batch is split into 100 pages of 1000 transactions each. This will result in 100 calls made to the api for each of the 100 pages. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void accountsAccountIdTransactionsPostTest() throws ApiException {
        String accountId = null;
        Page body = null;
        api.accountsAccountIdTransactionsPost(accountId, body);

        // TODO: test validations
    }
    /**
     * create or update clients
     *
     * Provides an idempotent way to create or update clients i.e. the POST method is used for both create and updates of clients. If the supplied client_id does not exist in the Commspace database a new client record will be created. If it already exists the existing matching client record will be updated. At this stage deletion of client records is not supported Supports multiple clients per call.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountClientsTest() throws ApiException {
        String accountId = null;
        LoadClientsRequest body = null;
        api.postAccountClients(accountId, body);

        // TODO: test validations
    }
    /**
     * create report
     *
     * trigger the creation of a report
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountCreateReportTest() throws ApiException {
        String accountId = null;
        CreateReportRequest body = null;
        ReportToken response = api.postAccountCreateReport(accountId, body);

        // TODO: test validations
    }
    /**
     * create or update intermediaries
     *
     * Provides an idempotent way to create or update intermediaries i.e. the POST method is used for both create and updates of intermediaries. If the supplied intermediary_id does not exist in the Commspace database a new intermediary record will be created. If it already exists the existing matching intermediary record will be updated. At this stage deletion of intermediary records is not supported Supports multiple intermediaries per call.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountIntermediariesTest() throws ApiException {
        String accountId = null;
        LoadIntermediariesRequest body = null;
        api.postAccountIntermediaries(accountId, body);

        // TODO: test validations
    }
    /**
     * create temporary sso token
     *
     * Create a temporary SSO token for the supplied user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountSsoTemporaryTokenTest() throws ApiException {
        String accountId = null;
        TemporaryTokenRequest body = null;
        TemporaryToken response = api.postAccountSsoTemporaryToken(accountId, body);

        // TODO: test validations
    }
    /**
     * retrieve a client
     *
     * retrieve a client given an identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveClientTest() throws ApiException {
        String accountId = null;
        String clientId = null;
        Client response = api.retrieveClient(accountId, clientId);

        // TODO: test validations
    }
    /**
     * retrieve an intermediary
     *
     * retrieve an intermediary given an identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveIntermediaryTest() throws ApiException {
        String accountId = null;
        String intermediaryId = null;
        Intermediary response = api.retrieveIntermediary(accountId, intermediaryId);

        // TODO: test validations
    }
    /**
     * retrieve a report for an intermediary
     *
     * retrieve a report given intermediary and report identifiers. This method has been deprecated in favour of the /accounts/{account_id}/reports endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveIntermediaryReportTest() throws ApiException {
        String accountId = null;
        String reportId = null;
        String intermediaryId = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String format = null;
        String productId = null;
        String clientId = null;
        ReportResponse response = api.retrieveIntermediaryReport(accountId, reportId, intermediaryId, startDate, endDate, format, productId, clientId);

        // TODO: test validations
    }
    /**
     * retrieve a product
     *
     * retrieve a product with the given product identifiers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProductTest() throws ApiException {
        String accountId = null;
        String productId = null;
        Product response = api.retrieveProduct(accountId, productId);

        // TODO: test validations
    }
    /**
     * retrieve a report
     *
     * Retrieve a report given report identifiers. This method has been deprecated in favour of the /accounts/{account_id}/reports endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveReportTest() throws ApiException {
        String accountId = null;
        String reportId = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String format = null;
        ReportResponse response = api.retrieveReport(accountId, reportId, startDate, endDate, format);

        // TODO: test validations
    }
}
