/*
 * Commspace API
 *   # Authentication In order to use this API you'll need two things to authenticate: - an **account_id** which identifies which Commspace account (tenant) you're integrating into. This is provided in the url of all api methods `/accounts/{account_id}/...` - an **API Key** which authenticates your access to the account. This is provided as a header as described below  # Mapping master data  Commspace relies on master data (clients, products, intermediaries) supplied by consumer systems in order to do revenue management. We've chosen to implement a consumer-supplied key system to minimize the data mapping burden for consumers. This means that for all master data entities, the consumer supplies their own unique identifier for each entity. Commspace will store that identifier internally and link any subsequent requests with the same identifier to that same entity. In the [specification](/spec.html) you can easily spot these identifier fields as all fields named with the pattern `<entity>_id` e.g. `client_id`, `product_id`, `intermediary_id`, etc.  Some key mappings (providers, product categories, commission types) have to be pre-configured by the Commspace team ahead of time. We will take responsibility for creating the necessary mappings of your identifiers for each of these entities to their Commspace equivalents - all we require is a full list of the values that you will send.  # Generating-Reports Reports can be generated through the methods exposed at the reports root.  Because reports can take a long time to generate this API does not support blocking calls i.e. wait until the report is generated before returning a response.  This API supports two patterns for non-blocking / asynchronous generation of reports:  - **Callback pattern**. The consumer provides a callback URL to post the report to. This is the preferred pattern.  - **Polling pattern**. The consumer repeatedly polls an endpoint to retrieve the report.  ## Callback pattern To make use of this pattern, simply specify a callback_url in the request to `/accounts/{account_id}/reports`.  When the report has been generated, Commspace will submit a POST to the provided URL with the following:  - report-token is the report token returned by the createReport call  - filename contains a suggested filename.  - content is a base64 encoded string of the binary data of the report  ## Polling pattern When a report is successfully requested, the API responds with a report_token in the response. Consumers can use this token to poll the endpoint `/accounts/{account_id}/reports/{report_token}`.  If the report isn't available yet, a 202 response will be returned. If the report is available a 200 response including the report will be returned. 
 *
 * OpenAPI spec version: 1.1.2
 * Contact: api@commspace.co.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package za.co.commspace.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import za.co.commspace.api.model.Transaction;
/**
 * Represents a page of transaction entries that form part of a logical batch. Includes properties to help track progress of the complete batch e.g.position of this page in the batch, total size of the batch and number of transactions in the page
 */
@Schema(description = "Represents a page of transaction entries that form part of a logical batch. Includes properties to help track progress of the complete batch e.g.position of this page in the batch, total size of the batch and number of transactions in the page")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-15T08:32:32.372Z[GMT]")
public class Page {
  @JsonProperty("batch_id")
  private String batchId = null;

  @JsonProperty("batch_size")
  private Integer batchSize = null;

  @JsonProperty("page_size")
  private Integer pageSize = null;

  @JsonProperty("page_number")
  private Integer pageNumber = null;

  @JsonProperty("transactions")
  private List<Transaction> transactions = null;

  public Page batchId(String batchId) {
    this.batchId = batchId;
    return this;
  }

   /**
   * unique identifier by which the batch this page is part of is known at consumer
   * @return batchId
  **/
  @Schema(example = "12345566", required = true, description = "unique identifier by which the batch this page is part of is known at consumer")
  public String getBatchId() {
    return batchId;
  }

  public void setBatchId(String batchId) {
    this.batchId = batchId;
  }

  public Page batchSize(Integer batchSize) {
    this.batchSize = batchSize;
    return this;
  }

   /**
   * total number of transactions in batch
   * @return batchSize
  **/
  @Schema(example = "1000", required = true, description = "total number of transactions in batch")
  public Integer getBatchSize() {
    return batchSize;
  }

  public void setBatchSize(Integer batchSize) {
    this.batchSize = batchSize;
  }

  public Page pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * number of transactions in this page
   * @return pageSize
  **/
  @Schema(example = "100", required = true, description = "number of transactions in this page")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public Page pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * ordinal number of page in batch. page numbering starts at 0.
   * @return pageNumber
  **/
  @Schema(example = "7", required = true, description = "ordinal number of page in batch. page numbering starts at 0.")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public Page transactions(List<Transaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public Page addTransactionsItem(Transaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * transactions in the page
   * @return transactions
  **/
  @Schema(description = "transactions in the page")
  public List<Transaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<Transaction> transactions) {
    this.transactions = transactions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Page page = (Page) o;
    return Objects.equals(this.batchId, page.batchId) &&
        Objects.equals(this.batchSize, page.batchSize) &&
        Objects.equals(this.pageSize, page.pageSize) &&
        Objects.equals(this.pageNumber, page.pageNumber) &&
        Objects.equals(this.transactions, page.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchId, batchSize, pageSize, pageNumber, transactions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Page {\n");
    
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
