/*
 * Commspace source data API
 * API for Commspace source data management
 *
 * OpenAPI spec version: 1.0.4
 * Contact: api@commspace.co.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Client;
import io.swagger.client.model.CreateReportRequest;
import io.swagger.client.model.ImportErrorList;
import io.swagger.client.model.Intermediary;
import io.swagger.client.model.LoadClientsRequest;
import io.swagger.client.model.LoadIntermediariesRequest;
import org.threeten.bp.LocalDate;
import io.swagger.client.model.Product;
import io.swagger.client.model.ReportResponse;
import io.swagger.client.model.ReportToken;
import io.swagger.client.model.TemporaryToken;
import io.swagger.client.model.TemporaryTokenRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for accountsAccountIdReportsReportTokenGet
     * @param accountId unique identifier for account (required)
     * @param reportToken Unique identifier of the report to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountsAccountIdReportsReportTokenGetCall(String accountId, UUID reportToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/reports/{report_token}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "report_token" + "\\}", apiClient.escapeString(reportToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountsAccountIdReportsReportTokenGetValidateBeforeCall(String accountId, UUID reportToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsAccountIdReportsReportTokenGet(Async)");
        }
        // verify the required parameter 'reportToken' is set
        if (reportToken == null) {
            throw new ApiException("Missing the required parameter 'reportToken' when calling accountsAccountIdReportsReportTokenGet(Async)");
        }
        
        com.squareup.okhttp.Call call = accountsAccountIdReportsReportTokenGetCall(accountId, reportToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieve report
     * retrieve a report given a token
     * @param accountId unique identifier for account (required)
     * @param reportToken Unique identifier of the report to retrieve (required)
     * @return ReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportResponse accountsAccountIdReportsReportTokenGet(String accountId, UUID reportToken) throws ApiException {
        ApiResponse<ReportResponse> resp = accountsAccountIdReportsReportTokenGetWithHttpInfo(accountId, reportToken);
        return resp.getData();
    }

    /**
     * retrieve report
     * retrieve a report given a token
     * @param accountId unique identifier for account (required)
     * @param reportToken Unique identifier of the report to retrieve (required)
     * @return ApiResponse&lt;ReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportResponse> accountsAccountIdReportsReportTokenGetWithHttpInfo(String accountId, UUID reportToken) throws ApiException {
        com.squareup.okhttp.Call call = accountsAccountIdReportsReportTokenGetValidateBeforeCall(accountId, reportToken, null, null);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieve report (asynchronously)
     * retrieve a report given a token
     * @param accountId unique identifier for account (required)
     * @param reportToken Unique identifier of the report to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountsAccountIdReportsReportTokenGetAsync(String accountId, UUID reportToken, final ApiCallback<ReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountsAccountIdReportsReportTokenGetValidateBeforeCall(accountId, reportToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountClients
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountClientsCall(String accountId, LoadClientsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/clients"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountClientsValidateBeforeCall(String accountId, LoadClientsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountClients(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountClientsCall(accountId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * create or update clients
     * Provides an idempotent way to create or update clients. Supports multiple clients per call.
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postAccountClients(String accountId, LoadClientsRequest body) throws ApiException {
        postAccountClientsWithHttpInfo(accountId, body);
    }

    /**
     * create or update clients
     * Provides an idempotent way to create or update clients. Supports multiple clients per call.
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postAccountClientsWithHttpInfo(String accountId, LoadClientsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = postAccountClientsValidateBeforeCall(accountId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * create or update clients (asynchronously)
     * Provides an idempotent way to create or update clients. Supports multiple clients per call.
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountClientsAsync(String accountId, LoadClientsRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountClientsValidateBeforeCall(accountId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postAccountCreateReport
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountCreateReportCall(String accountId, CreateReportRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/reports"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountCreateReportValidateBeforeCall(String accountId, CreateReportRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountCreateReport(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountCreateReportCall(accountId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * create report
     * trigger the creation of a report
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @return ReportToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportToken postAccountCreateReport(String accountId, CreateReportRequest body) throws ApiException {
        ApiResponse<ReportToken> resp = postAccountCreateReportWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * create report
     * trigger the creation of a report
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ReportToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportToken> postAccountCreateReportWithHttpInfo(String accountId, CreateReportRequest body) throws ApiException {
        com.squareup.okhttp.Call call = postAccountCreateReportValidateBeforeCall(accountId, body, null, null);
        Type localVarReturnType = new TypeToken<ReportToken>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create report (asynchronously)
     * trigger the creation of a report
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountCreateReportAsync(String accountId, CreateReportRequest body, final ApiCallback<ReportToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountCreateReportValidateBeforeCall(accountId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportToken>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountIntermediaries
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountIntermediariesCall(String accountId, LoadIntermediariesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intermediaries"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountIntermediariesValidateBeforeCall(String accountId, LoadIntermediariesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountIntermediaries(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountIntermediariesCall(accountId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * create or update intermediaries
     * Provides an idempotent way to create or update intermediaries. Supports multiple intermediaries per call.
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postAccountIntermediaries(String accountId, LoadIntermediariesRequest body) throws ApiException {
        postAccountIntermediariesWithHttpInfo(accountId, body);
    }

    /**
     * create or update intermediaries
     * Provides an idempotent way to create or update intermediaries. Supports multiple intermediaries per call.
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postAccountIntermediariesWithHttpInfo(String accountId, LoadIntermediariesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = postAccountIntermediariesValidateBeforeCall(accountId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * create or update intermediaries (asynchronously)
     * Provides an idempotent way to create or update intermediaries. Supports multiple intermediaries per call.
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountIntermediariesAsync(String accountId, LoadIntermediariesRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountIntermediariesValidateBeforeCall(accountId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postAccountSsoTemporaryToken
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountSsoTemporaryTokenCall(String accountId, TemporaryTokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/sso/temporarytoken"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountSsoTemporaryTokenValidateBeforeCall(String accountId, TemporaryTokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountSsoTemporaryToken(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountSsoTemporaryTokenCall(accountId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * create temporary sso token
     * Create a temporary SSO token for the supplied user
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @return TemporaryToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemporaryToken postAccountSsoTemporaryToken(String accountId, TemporaryTokenRequest body) throws ApiException {
        ApiResponse<TemporaryToken> resp = postAccountSsoTemporaryTokenWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * create temporary sso token
     * Create a temporary SSO token for the supplied user
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @return ApiResponse&lt;TemporaryToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemporaryToken> postAccountSsoTemporaryTokenWithHttpInfo(String accountId, TemporaryTokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = postAccountSsoTemporaryTokenValidateBeforeCall(accountId, body, null, null);
        Type localVarReturnType = new TypeToken<TemporaryToken>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create temporary sso token (asynchronously)
     * Create a temporary SSO token for the supplied user
     * @param accountId unique identifier for account (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountSsoTemporaryTokenAsync(String accountId, TemporaryTokenRequest body, final ApiCallback<TemporaryToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountSsoTemporaryTokenValidateBeforeCall(accountId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemporaryToken>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveClient
     * @param accountId unique identifier for account (required)
     * @param clientId unique identifier by which this client is known at consumer (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveClientCall(String accountId, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/clients/{client_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveClientValidateBeforeCall(String accountId, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling retrieveClient(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveClient(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveClientCall(accountId, clientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieve a client
     * retrieve a client given an identifier
     * @param accountId unique identifier for account (required)
     * @param clientId unique identifier by which this client is known at consumer (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Client retrieveClient(String accountId, String clientId) throws ApiException {
        ApiResponse<Client> resp = retrieveClientWithHttpInfo(accountId, clientId);
        return resp.getData();
    }

    /**
     * retrieve a client
     * retrieve a client given an identifier
     * @param accountId unique identifier for account (required)
     * @param clientId unique identifier by which this client is known at consumer (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Client> retrieveClientWithHttpInfo(String accountId, String clientId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveClientValidateBeforeCall(accountId, clientId, null, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieve a client (asynchronously)
     * retrieve a client given an identifier
     * @param accountId unique identifier for account (required)
     * @param clientId unique identifier by which this client is known at consumer (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveClientAsync(String accountId, String clientId, final ApiCallback<Client> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveClientValidateBeforeCall(accountId, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveIntermediary
     * @param accountId unique identifier for account (required)
     * @param intermediaryId unique identifier by which this intermediary is known at consumer (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveIntermediaryCall(String accountId, String intermediaryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intermediaries/{intermediary_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "intermediary_id" + "\\}", apiClient.escapeString(intermediaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveIntermediaryValidateBeforeCall(String accountId, String intermediaryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling retrieveIntermediary(Async)");
        }
        // verify the required parameter 'intermediaryId' is set
        if (intermediaryId == null) {
            throw new ApiException("Missing the required parameter 'intermediaryId' when calling retrieveIntermediary(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveIntermediaryCall(accountId, intermediaryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieve an intermediary
     * retrieve an intermediary given an identifier
     * @param accountId unique identifier for account (required)
     * @param intermediaryId unique identifier by which this intermediary is known at consumer (required)
     * @return Intermediary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Intermediary retrieveIntermediary(String accountId, String intermediaryId) throws ApiException {
        ApiResponse<Intermediary> resp = retrieveIntermediaryWithHttpInfo(accountId, intermediaryId);
        return resp.getData();
    }

    /**
     * retrieve an intermediary
     * retrieve an intermediary given an identifier
     * @param accountId unique identifier for account (required)
     * @param intermediaryId unique identifier by which this intermediary is known at consumer (required)
     * @return ApiResponse&lt;Intermediary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Intermediary> retrieveIntermediaryWithHttpInfo(String accountId, String intermediaryId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveIntermediaryValidateBeforeCall(accountId, intermediaryId, null, null);
        Type localVarReturnType = new TypeToken<Intermediary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieve an intermediary (asynchronously)
     * retrieve an intermediary given an identifier
     * @param accountId unique identifier for account (required)
     * @param intermediaryId unique identifier by which this intermediary is known at consumer (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveIntermediaryAsync(String accountId, String intermediaryId, final ApiCallback<Intermediary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveIntermediaryValidateBeforeCall(accountId, intermediaryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Intermediary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveIntermediaryReport
     * @param accountId unique identifier for account (required)
     * @param reportId identifier of report to retrieve (required)
     * @param intermediaryId unique identifier by which the intermediary is known at consumer (required)
     * @param startDate earliest date for which to retrieve report data (required)
     * @param endDate latest date for which to retrieve report data (required)
     * @param format desired format of the report (required)
     * @param productId unique identifier by which the product is known at consumer (optional)
     * @param clientId unique identifier by the client is known at consumer (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveIntermediaryReportCall(String accountId, String reportId, String intermediaryId, LocalDate startDate, LocalDate endDate, String format, String productId, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intermediaries/{intermediary_id}/reports/{report_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "report_id" + "\\}", apiClient.escapeString(reportId.toString()))
            .replaceAll("\\{" + "intermediary_id" + "\\}", apiClient.escapeString(intermediaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product_id", productId));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveIntermediaryReportValidateBeforeCall(String accountId, String reportId, String intermediaryId, LocalDate startDate, LocalDate endDate, String format, String productId, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling retrieveIntermediaryReport(Async)");
        }
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling retrieveIntermediaryReport(Async)");
        }
        // verify the required parameter 'intermediaryId' is set
        if (intermediaryId == null) {
            throw new ApiException("Missing the required parameter 'intermediaryId' when calling retrieveIntermediaryReport(Async)");
        }
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling retrieveIntermediaryReport(Async)");
        }
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling retrieveIntermediaryReport(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling retrieveIntermediaryReport(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveIntermediaryReportCall(accountId, reportId, intermediaryId, startDate, endDate, format, productId, clientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieve a report for an intermediary
     * retrieve a report given intermediary and report identifiers
     * @param accountId unique identifier for account (required)
     * @param reportId identifier of report to retrieve (required)
     * @param intermediaryId unique identifier by which the intermediary is known at consumer (required)
     * @param startDate earliest date for which to retrieve report data (required)
     * @param endDate latest date for which to retrieve report data (required)
     * @param format desired format of the report (required)
     * @param productId unique identifier by which the product is known at consumer (optional)
     * @param clientId unique identifier by the client is known at consumer (optional)
     * @return ReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportResponse retrieveIntermediaryReport(String accountId, String reportId, String intermediaryId, LocalDate startDate, LocalDate endDate, String format, String productId, String clientId) throws ApiException {
        ApiResponse<ReportResponse> resp = retrieveIntermediaryReportWithHttpInfo(accountId, reportId, intermediaryId, startDate, endDate, format, productId, clientId);
        return resp.getData();
    }

    /**
     * retrieve a report for an intermediary
     * retrieve a report given intermediary and report identifiers
     * @param accountId unique identifier for account (required)
     * @param reportId identifier of report to retrieve (required)
     * @param intermediaryId unique identifier by which the intermediary is known at consumer (required)
     * @param startDate earliest date for which to retrieve report data (required)
     * @param endDate latest date for which to retrieve report data (required)
     * @param format desired format of the report (required)
     * @param productId unique identifier by which the product is known at consumer (optional)
     * @param clientId unique identifier by the client is known at consumer (optional)
     * @return ApiResponse&lt;ReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportResponse> retrieveIntermediaryReportWithHttpInfo(String accountId, String reportId, String intermediaryId, LocalDate startDate, LocalDate endDate, String format, String productId, String clientId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveIntermediaryReportValidateBeforeCall(accountId, reportId, intermediaryId, startDate, endDate, format, productId, clientId, null, null);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieve a report for an intermediary (asynchronously)
     * retrieve a report given intermediary and report identifiers
     * @param accountId unique identifier for account (required)
     * @param reportId identifier of report to retrieve (required)
     * @param intermediaryId unique identifier by which the intermediary is known at consumer (required)
     * @param startDate earliest date for which to retrieve report data (required)
     * @param endDate latest date for which to retrieve report data (required)
     * @param format desired format of the report (required)
     * @param productId unique identifier by which the product is known at consumer (optional)
     * @param clientId unique identifier by the client is known at consumer (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveIntermediaryReportAsync(String accountId, String reportId, String intermediaryId, LocalDate startDate, LocalDate endDate, String format, String productId, String clientId, final ApiCallback<ReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveIntermediaryReportValidateBeforeCall(accountId, reportId, intermediaryId, startDate, endDate, format, productId, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveProduct
     * @param accountId unique identifier for account (required)
     * @param productId unique identifier by which this product is known at consumer (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveProductCall(String accountId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/products/{product_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveProductValidateBeforeCall(String accountId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling retrieveProduct(Async)");
        }
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling retrieveProduct(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveProductCall(accountId, productId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieve a product
     * retrieve a product with the given product identifiers
     * @param accountId unique identifier for account (required)
     * @param productId unique identifier by which this product is known at consumer (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Product retrieveProduct(String accountId, String productId) throws ApiException {
        ApiResponse<Product> resp = retrieveProductWithHttpInfo(accountId, productId);
        return resp.getData();
    }

    /**
     * retrieve a product
     * retrieve a product with the given product identifiers
     * @param accountId unique identifier for account (required)
     * @param productId unique identifier by which this product is known at consumer (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Product> retrieveProductWithHttpInfo(String accountId, String productId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveProductValidateBeforeCall(accountId, productId, null, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieve a product (asynchronously)
     * retrieve a product with the given product identifiers
     * @param accountId unique identifier for account (required)
     * @param productId unique identifier by which this product is known at consumer (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveProductAsync(String accountId, String productId, final ApiCallback<Product> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveProductValidateBeforeCall(accountId, productId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveReport
     * @param accountId unique identifier for account (required)
     * @param reportId identifier of report to retrieve (required)
     * @param startDate earliest date for which to retrieve report data (required)
     * @param endDate latest date for which to retrieve report data (required)
     * @param format desired format of the report (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveReportCall(String accountId, String reportId, LocalDate startDate, LocalDate endDate, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/clients/reports/{report_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "report_id" + "\\}", apiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveReportValidateBeforeCall(String accountId, String reportId, LocalDate startDate, LocalDate endDate, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling retrieveReport(Async)");
        }
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling retrieveReport(Async)");
        }
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling retrieveReport(Async)");
        }
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling retrieveReport(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling retrieveReport(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveReportCall(accountId, reportId, startDate, endDate, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieve a report
     * retrieve a report given report identifiers
     * @param accountId unique identifier for account (required)
     * @param reportId identifier of report to retrieve (required)
     * @param startDate earliest date for which to retrieve report data (required)
     * @param endDate latest date for which to retrieve report data (required)
     * @param format desired format of the report (required)
     * @return ReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportResponse retrieveReport(String accountId, String reportId, LocalDate startDate, LocalDate endDate, String format) throws ApiException {
        ApiResponse<ReportResponse> resp = retrieveReportWithHttpInfo(accountId, reportId, startDate, endDate, format);
        return resp.getData();
    }

    /**
     * retrieve a report
     * retrieve a report given report identifiers
     * @param accountId unique identifier for account (required)
     * @param reportId identifier of report to retrieve (required)
     * @param startDate earliest date for which to retrieve report data (required)
     * @param endDate latest date for which to retrieve report data (required)
     * @param format desired format of the report (required)
     * @return ApiResponse&lt;ReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportResponse> retrieveReportWithHttpInfo(String accountId, String reportId, LocalDate startDate, LocalDate endDate, String format) throws ApiException {
        com.squareup.okhttp.Call call = retrieveReportValidateBeforeCall(accountId, reportId, startDate, endDate, format, null, null);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieve a report (asynchronously)
     * retrieve a report given report identifiers
     * @param accountId unique identifier for account (required)
     * @param reportId identifier of report to retrieve (required)
     * @param startDate earliest date for which to retrieve report data (required)
     * @param endDate latest date for which to retrieve report data (required)
     * @param format desired format of the report (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveReportAsync(String accountId, String reportId, LocalDate startDate, LocalDate endDate, String format, final ApiCallback<ReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveReportValidateBeforeCall(accountId, reportId, startDate, endDate, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
