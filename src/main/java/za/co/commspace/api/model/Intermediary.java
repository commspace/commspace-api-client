/*
 * Commspace API
 *   # Authentication In order to use this API you'll need two things to authenticate: - an **account_id** which identifies which Commspace account (tenant) you're integrating into. This is provided in the url of all api methods `/accounts/{account_id}/...` - an **API Key** which authenticates your access to the account. This is provided as a header as described below  # Mapping master data  Commspace relies on master data (clients, products, intermediaries) supplied by consumer systems in order to do revenue management. We've chosen to implement a consumer-supplied key system to minimize the data mapping burden for consumers. This means that for all master data entities, the consumer supplies their own unique identifier for each entity. Commspace will store that identifier internally and link any subsequent requests with the same identifier to that same entity. In the [specification](/spec.html) you can easily spot these identifier fields as all fields named with the pattern `<entity>_id` e.g. `client_id`, `product_id`, `intermediary_id`, etc.  Some key mappings (providers, product categories, commission types) have to be pre-configured by the Commspace team ahead of time. We will take responsibility for creating the necessary mappings of your identifiers for each of these entities to their Commspace equivalents - all we require is a full list of the values that you will send.  # Generating-Reports Reports can be generated through the methods exposed at the reports root.  Because reports can take a long time to generate this API does not support blocking calls i.e. wait until the report is generated before returning a response.  This API supports two patterns for non-blocking / asynchronous generation of reports:  - **Callback pattern**. The consumer provides a callback URL to post the report to. This is the preferred pattern.  - **Polling pattern**. The consumer repeatedly polls an endpoint to retrieve the report.  ## Callback pattern To make use of this pattern, simply specify a callback_url in the request to `/accounts/{account_id}/reports`.  When the report has been generated, Commspace will submit a POST to the provided URL with the following:  - report-token is the report token returned by the createReport call  - filename contains a suggested filename.  - content is a base64 encoded string of the binary data of the report  ## Polling pattern When a report is successfully requested, the API responds with a report_token in the response. Consumers can use this token to poll the endpoint `/accounts/{account_id}/reports/{report_token}`.  If the report isn't available yet, a 202 response will be returned. If the report is available a 200 response including the report will be returned. 
 *
 * OpenAPI spec version: 1.1.2
 * Contact: api@commspace.co.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package za.co.commspace.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import za.co.commspace.api.model.ProviderCode;
/**
 * Intermediary
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-15T08:32:32.372Z[GMT]")
public class Intermediary {
  @JsonProperty("intermediary_id")
  private String intermediaryId = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("email")
  private String email = null;

  @JsonProperty("national_registration")
  private String nationalRegistration = null;

  @JsonProperty("start_date")
  private LocalDate startDate = null;

  @JsonProperty("end_date")
  private LocalDate endDate = null;

  @JsonProperty("payment_end_date")
  private LocalDate paymentEndDate = null;

  /**
   * the employment status of the intermediary. If not specified, the \&quot;active\&quot; status will be assumed.
   */
  public enum StatusEnum {
    ACTIVE("active"),
    RETIRED("retired"),
    DISABLED("disabled"),
    DISMISSED("dismissed"),
    RESIGNED("resigned"),
    DECEASED("deceased");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = StatusEnum.ACTIVE;

  @JsonProperty("intermediary_code")
  private String intermediaryCode = null;

  @JsonProperty("intermediary_group_id")
  private String intermediaryGroupId = null;

  @JsonProperty("provider_codes")
  private List<ProviderCode> providerCodes = null;

  public Intermediary intermediaryId(String intermediaryId) {
    this.intermediaryId = intermediaryId;
    return this;
  }

   /**
   * unique identifier by which this intermediary is known at consumer
   * @return intermediaryId
  **/
  @Schema(example = "abc1234", required = true, description = "unique identifier by which this intermediary is known at consumer")
  public String getIntermediaryId() {
    return intermediaryId;
  }

  public void setIntermediaryId(String intermediaryId) {
    this.intermediaryId = intermediaryId;
  }

  public Intermediary name(String name) {
    this.name = name;
    return this;
  }

   /**
   * name of intermediary
   * @return name
  **/
  @Schema(example = "Johan Botha", required = true, description = "name of intermediary")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Intermediary email(String email) {
    this.email = email;
    return this;
  }

   /**
   * email address of intermediary
   * @return email
  **/
  @Schema(description = "email address of intermediary")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public Intermediary nationalRegistration(String nationalRegistration) {
    this.nationalRegistration = nationalRegistration;
    return this;
  }

   /**
   * ID Number / Passport / other issued registration
   * @return nationalRegistration
  **/
  @Schema(example = "8207235800086", description = "ID Number / Passport / other issued registration")
  public String getNationalRegistration() {
    return nationalRegistration;
  }

  public void setNationalRegistration(String nationalRegistration) {
    this.nationalRegistration = nationalRegistration;
  }

  public Intermediary startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * appointment date of the intermediary formatted per RFC3339.
   * @return startDate
  **/
  @Schema(description = "appointment date of the intermediary formatted per RFC3339.")
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }

  public Intermediary endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * date on which the employment status of the intermediary became inactive formatted per RFC3339. This field is required if status is not active. nullable: true
   * @return endDate
  **/
  @Schema(description = "date on which the employment status of the intermediary became inactive formatted per RFC3339. This field is required if status is not active. nullable: true")
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }

  public Intermediary paymentEndDate(LocalDate paymentEndDate) {
    this.paymentEndDate = paymentEndDate;
    return this;
  }

   /**
   * date on which payment to the intermediary must cease formatted per RFC3339. Defaults to end_date if not supplied.
   * @return paymentEndDate
  **/
  @Schema(description = "date on which payment to the intermediary must cease formatted per RFC3339. Defaults to end_date if not supplied.")
  public LocalDate getPaymentEndDate() {
    return paymentEndDate;
  }

  public void setPaymentEndDate(LocalDate paymentEndDate) {
    this.paymentEndDate = paymentEndDate;
  }

  public Intermediary status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * the employment status of the intermediary. If not specified, the \&quot;active\&quot; status will be assumed.
   * @return status
  **/
  @Schema(description = "the employment status of the intermediary. If not specified, the \"active\" status will be assumed.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Intermediary intermediaryCode(String intermediaryCode) {
    this.intermediaryCode = intermediaryCode;
    return this;
  }

   /**
   * business key uniquely identifying intermediary in parent organisation
   * @return intermediaryCode
  **/
  @Schema(description = "business key uniquely identifying intermediary in parent organisation")
  public String getIntermediaryCode() {
    return intermediaryCode;
  }

  public void setIntermediaryCode(String intermediaryCode) {
    this.intermediaryCode = intermediaryCode;
  }

  public Intermediary intermediaryGroupId(String intermediaryGroupId) {
    this.intermediaryGroupId = intermediaryGroupId;
    return this;
  }

   /**
   * unique identifier of intermediary group that this intermediary belongs to
   * @return intermediaryGroupId
  **/
  @Schema(description = "unique identifier of intermediary group that this intermediary belongs to")
  public String getIntermediaryGroupId() {
    return intermediaryGroupId;
  }

  public void setIntermediaryGroupId(String intermediaryGroupId) {
    this.intermediaryGroupId = intermediaryGroupId;
  }

  public Intermediary providerCodes(List<ProviderCode> providerCodes) {
    this.providerCodes = providerCodes;
    return this;
  }

  public Intermediary addProviderCodesItem(ProviderCode providerCodesItem) {
    if (this.providerCodes == null) {
      this.providerCodes = new ArrayList<>();
    }
    this.providerCodes.add(providerCodesItem);
    return this;
  }

   /**
   * Get providerCodes
   * @return providerCodes
  **/
  @Schema(description = "")
  public List<ProviderCode> getProviderCodes() {
    return providerCodes;
  }

  public void setProviderCodes(List<ProviderCode> providerCodes) {
    this.providerCodes = providerCodes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Intermediary intermediary = (Intermediary) o;
    return Objects.equals(this.intermediaryId, intermediary.intermediaryId) &&
        Objects.equals(this.name, intermediary.name) &&
        Objects.equals(this.email, intermediary.email) &&
        Objects.equals(this.nationalRegistration, intermediary.nationalRegistration) &&
        Objects.equals(this.startDate, intermediary.startDate) &&
        Objects.equals(this.endDate, intermediary.endDate) &&
        Objects.equals(this.paymentEndDate, intermediary.paymentEndDate) &&
        Objects.equals(this.status, intermediary.status) &&
        Objects.equals(this.intermediaryCode, intermediary.intermediaryCode) &&
        Objects.equals(this.intermediaryGroupId, intermediary.intermediaryGroupId) &&
        Objects.equals(this.providerCodes, intermediary.providerCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intermediaryId, name, email, nationalRegistration, startDate, endDate, paymentEndDate, status, intermediaryCode, intermediaryGroupId, providerCodes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Intermediary {\n");
    
    sb.append("    intermediaryId: ").append(toIndentedString(intermediaryId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    nationalRegistration: ").append(toIndentedString(nationalRegistration)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    paymentEndDate: ").append(toIndentedString(paymentEndDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    intermediaryCode: ").append(toIndentedString(intermediaryCode)).append("\n");
    sb.append("    intermediaryGroupId: ").append(toIndentedString(intermediaryGroupId)).append("\n");
    sb.append("    providerCodes: ").append(toIndentedString(providerCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
